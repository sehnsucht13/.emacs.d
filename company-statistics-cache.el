(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("printf" (((:file "/home/yavor/pprojects/C-Programming/CStuff.c") . 1) (c-mode . 1) (nil . 1)) "console" (((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 2) ((:keyword "var") . 1) (js-mode . 2) (nil . 2)) "log" (((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 2) ((:symbol "console") . 2) ((:keyword "var") . 1) (js-mode . 2) (nil . 2)) "say-hello-to-me" ((slime-repl-mode . 1) (nil . 1)) "projectile-after-switch-project-hook" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":ensure" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "t" (((:file "/home/yavor/.emacs.d/init.el") . 4) ((:keyword "use-package") . 7) (emacs-lisp-mode . 8) (nil . 8) ((:keyword "setq") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 4)) ":defer" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":config" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 3) (emacs-lisp-mode . 3) (nil . 3) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 2)) "evil-leader/set-key-for-mode" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "evil-leader/set-key" (((:file "/home/yavor/.emacs.d/init.el") . 3) ((:keyword "use-package") . 3) (emacs-lisp-mode . 3) (nil . 3)) "helm-projectile-switch-project" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "helm-projectile-find-file" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "helm-projectile-find-dir" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "scroll-preserve-screen-position" (((:file "/home/yavor/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "def" (((:file "/home/yavor/pprojects/testt.py") . 2) ((:keyword "print") . 2) (python-mode . 2) (nil . 2)) "add-to-list" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "interactive") . 1)) "company-backends" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 2) ((:keyword "use-package") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "interactive") . 1)) "yas-minor-mode" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "flycheck-mode" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "assert" (((:file "/home/yavor/pprojects/test.c") . 1) (c-mode . 1) (nil . 1)) "assert.h" (((:file "/home/yavor/pprojects/test.c") . 1) (c-mode . 1) (nil . 1)) "company-math-symbols-latex" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-latex-commands" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-math-symbols-unicode" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "urwid" (((:file "/home/yavor/pprojects/testt.py") . 3) ((:keyword "import") . 1) (python-mode . 3) (nil . 3) ((:keyword "print") . 2)) "widget" (((:file "/home/yavor/pprojects/testt.py") . 1) ((:symbol "urwid") . 1) ((:keyword "print") . 1) (python-mode . 1) (nil . 1)) "add-hook" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-completion-started-hook" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) (emacs-lisp-mode . 1) (nil . 1)) "gc-cons-threshold" (((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)))) company-statistics--log [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ("printf" (nil . 1) (c-mode . 1) ((:file "/home/yavor/pprojects/C-Programming/CStuff.c") . 1)) ("console" (nil . 2) (js-mode . 2) ((:keyword "var") . 1) ((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 2)) ("log" (nil . 2) (js-mode . 2) ((:keyword "var") . 1) ((:symbol "console") . 2) ((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 2)) ("console" (nil . 1) (js-mode . 1) ((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 1)) ("log" (nil . 1) (js-mode . 1) ((:symbol "console") . 1) ((:file "/home/yavor/pprojects/JSExtTest/borderify.js") . 1)) ("say-hello-to-me" (nil . 1) (slime-repl-mode . 1)) ("projectile-after-switch-project-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) (":ensure" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("t" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "use-package") . 3) ((:file "/home/yavor/.emacs.d/init.el") . 4)) (":defer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("evil-leader/set-key-for-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("evil-leader/set-key" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "use-package") . 3) ((:file "/home/yavor/.emacs.d/init.el") . 3)) ("helm-projectile-switch-project" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("helm-projectile-find-file" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("evil-leader/set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("helm-projectile-find-dir" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("scroll-preserve-screen-position" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/yavor/.emacs.d/init.el") . 1)) ("def" (nil . 2) (python-mode . 2) ((:keyword "print") . 2) ((:file "/home/yavor/pprojects/testt.py") . 2)) ("def" (nil . 1) (python-mode . 1) ((:keyword "print") . 1) ((:file "/home/yavor/pprojects/testt.py") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 4)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 2)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-backends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("yas-minor-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("flycheck-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("t" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("assert" (nil . 1) (c-mode . 1) ((:file "/home/yavor/pprojects/test.c") . 1)) ("assert.h" (nil . 1) (c-mode . 1) ((:file "/home/yavor/pprojects/test.c") . 1)) ("add-to-list" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-backends" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-math-symbols-latex" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-latex-commands" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-math-symbols-unicode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("urwid" (nil . 3) (python-mode . 3) ((:keyword "import") . 1) ((:file "/home/yavor/pprojects/testt.py") . 3)) ("urwid" (nil . 1) (python-mode . 1) ((:keyword "print") . 2) ((:file "/home/yavor/pprojects/testt.py") . 1)) ("widget" (nil . 1) (python-mode . 1) ((:keyword "print") . 1) ((:symbol "urwid") . 1) ((:file "/home/yavor/pprojects/testt.py") . 1)) ("urwid" (nil . 1) (python-mode . 1) ((:keyword "print") . 1) ((:file "/home/yavor/pprojects/testt.py") . 1)) ("add-hook" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("company-completion-started-hook" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1)) ("gc-cons-threshold" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/yavor/.emacs.d/newInit.org[*Org Src newInit.org[ emacs-lisp ]*]") . 1))] company-statistics--index 0)